.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "UDP-SENDER 1"
.TH UDP-SENDER 1 "December 15, 2014" "current" "Udpcast"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
udp\-sender \- broadcast file on a LAN
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
udp-sender [\-\-file \fIfile\fR] [\-\-full\-duplex] [\-\-half\-duplex] [\-\-pipe \fIpipe\fR] [\-\-portbase \fIportbase\fR] [\-\-blocksize \fIsize\fR] [\-\-interface \fInet-interface\fR] [\-\-mcast\-data\-address \fIdata-mcast-address\fR] [\-\-mcast\-rdv\-address \fImcast-rdv-address\fR] [\-\-max\-bitrate \fIbitrate\fR] [\-\-pointopoint] [\-\-async] [\-\-log \fIfile\fR] [\-\-min\-slice\-size \fImin\fR] [\-\-max\-slice\-size \fImax\fR] [\-\-slice\-size] [\-\-ttl \fItime-to-live\fR] [\-\-fec \fIstripes\fRx\fIredundancy\fR/\fIstripesize\fR] [\-\-print\-seed] [\-\-rexmit\-hello\-interval \fIinterval\fR] [\-\-autostart \fIautostart\fR] [\-\-broadcast] [\-\-min\-receivers receivers] [\-\-min\-wait \fIsec\fR] [\-\-max\-wait \fIsec\fR] [\-\-nokbd] [\-\-retries\-until\-drop \fIn\fR] [\-\-bw\-period \fIn\fR] [\-\-rate\-governor \fImodule.so:key1=value1,key2=value2\fR] [\-\-stat\-period \fIn\fR] [\-\-print\-uncompressed\-position \fIflag\fR]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`Udp\-sender\*(C'\fR is used to broadcast a file (for instance a disk
image) to multiple \f(CW\*(C`udp\-receivers\*(C'\fR on the local \s-1LAN\s0. In order
to do this, it uses Ethernet multicast or broadcast, so that all
receivers profit from the same physical datastream. Thus, sending to
10 destinations does not take more time than it would take to send
just 2.
.SH "OPTIONS"
.IX Header "OPTIONS"
.SS "Basic options"
.IX Subsection "Basic options"
.IP "\-\-file \fIfile\fR" 4
.IX Item "--file file"
Reads data to be transmitted from \fIfile\fR. If this parameter
is not supplied, data to be transmitted is read from stdin instead.
.IP "\-\-pipe \fIcommand\fR" 4
.IX Item "--pipe command"
Sends data through \fIpipe\fR before transmitting it. This is
useful for compressing/decompressing it, or for stripping out unused
blocks. The \fIcommand\fR gets a direct handle on the input file or
device, and thus may seek inside it, if needed. \f(CW\*(C`Udpcast\*(C'\fR
itself also keeps a handle on the file, which is used for an informal
progress display. The \fIcommand\fR's stdout is a pipe to udpcast.
.IP "\-\-autostart \fIn\fR" 4
.IX Item "--autostart n"
Starts transmission after \fIn\fR retransmissions of hello
packet, without waiting for a key stroke. Useful for unattended
operation, where udp-sender is started from a cron-job for a
broadcast/multicast at a scheduled time.
.SS "Networking options"
.IX Subsection "Networking options"
The following networking options should be supplied both on the sender
and the receivers:
.IP "\-\-portbase \fIportbase\fR" 4
.IX Item "--portbase portbase"
Default ports to use for udpcast. Two ports are used:
\&\fIportbase\fR and \fIportbase+1\fR . Thus, \fIPortbase\fR must be
even. Default is \f(CW9000\fR. The same \fIportbase\fR must be
specified for both \f(CW\*(C`udp\-sender\*(C'\fR and \f(CW\*(C`udp\-receiver\*(C'\fR.
.IP "\-\-interface \fIinterface\fR" 4
.IX Item "--interface interface"
Network interface used to send out the data. Default is \f(CW\*(C`eth0\*(C'\fR
.IP "\-\-ttl \fItime to live\fR" 4
.IX Item "--ttl time to live"
Sets the \fItime-to-live\fR parameter for the multicast
packets. Should theoretically allow to use UDPCast beyond the local
network, but not tested for lack of a multicast router.
.IP "\-\-mcast\-rdv\-address \fIaddress\fR" 4
.IX Item "--mcast-rdv-address address"
Uses a non-standard multicast address for the control
(rendez-vous) connection. This address is used by the sender and
receivers to \*(L"find\*(R" each other. This is \fBnot\fR the address that is
used to transfer the actual data.
.Sp
By default \f(CW\*(C`mcast\-rdv\-address\*(C'\fR is the Ethernet broadcast address
if \f(CW\*(C`ttl\*(C'\fR is 1, and \f(CW224.0.0.1\fR otherwise. This setting
should not be used except in very special situations, such as when
\&\f(CW224.0.0.1\fR cannot be used for policy reasons.
.PP
The following networking options should be supplied only on the sender:
.IP "\-\-mcast\-data\-address \fIaddress\fR" 4
.IX Item "--mcast-data-address address"
Uses the given address for multicasting the data. If not
specified, the program will automatically derive a multicast address
from its own \s-1IP\s0 (by keeping the last 27 bits of the \s-1IP\s0 and then
prepending 232).
.IP "\-\-pointopoint" 4
.IX Item "--pointopoint"
Point-to-point mode. Only a single receiver is allowed, but the
data will be directly send to this receiver (in unicast mode), rather
than multicast/broadcast all over the place. If no async mode is
chosen, and there happens to be only one receiver, point-to-point is
activated automatically.
.IP "\-\-nopointopoint" 4
.IX Item "--nopointopoint"
Don't use point-to-point, even if there is only one single
receiver.
.IP "\-\-full\-duplex" 4
.IX Item "--full-duplex"
Use this option if you use a full-duplex network. T\-base\-10 or 100
is full duplex if equipped with a switch. Hub based networks, or
T\-base\-2 networks (coaxial cable) are only \fBhalf-duplex\fR and you
should not use this option with these networks, or else you may
experience a 10% performance hit.
.Sp
N.B. On high-latency \s-1WAN\s0 links, the full-duplex option can lead to
substantial performance improvements, because it allows udp-sender to
send more data while it is still waiting for the previous batch to get
acknowledged.
.IP "\-\-half\-duplex" 4
.IX Item "--half-duplex"
Use half duplex mode (needed for Hub based or T\-base\-2
networks). This is the default behavior in this version of
udpcast.
.IP "\-\-broadcast" 4
.IX Item "--broadcast"
Use Ethernet broadcast, rather than multicast. Useful if you have
Ethernet cards which don't support multicast.
.Sp
By default, \f(CW\*(C`udpcast\*(C'\fR uses multicast. This allows sending the
data only to those receivers that requested it. Ethernet cards of
machines which \fIdon't\fR participate in the transmission
automatically block out the packets at the hardware level. Moreover,
network switches are able to selectively transmit the packets only to
those network ports to which receivers are connected. Both features
thus allow a much more efficient operation than broadcast. This option
should only be supplied on the sender.
.IP "\-b blocksize" 4
.IX Item "-b blocksize"
Choses the packet size. Default (and also maximum) is 1456.
.SS "Unidirectional mode (without return channel)"
.IX Subsection "Unidirectional mode (without return channel)"
The options described below are useful in situations where no \*(L"return
channel\*(R" is available, or where such a channel is impractical due to
high latency. In an unidirectional setup (i.e. without return
channel), the sender only sends data but doesn't expect any reply from
the receiver.
.PP
Unidirectional options must be used together, or else the transfer
will not work correctly. You may for example use the following command
line:
.PP
\&\f(CW\*(C`udp\-sender \-\-async \-\-max\-bitrate 10m \-\-fec 8x8\*(C'\fR
.IP "\-\-async" 4
.IX Item "--async"
Asynchronous mode. Do not request confirmations from
the receiver. Best used together with forward error correction and
bandwidth limitation, or else the receiver will abort the reception as
soon as it misses a packet. When the receiver aborts the reception in
such a way, it will print a list of packets lost in the slice causing
the problem. You can use this list to tune the
forward error correction parameters.
.IP "\-\-max\-bitrate \fIbitrate\fR" 4
.IX Item "--max-bitrate bitrate"
Limits bandwidth used by udpcast. Useful in asynchronous mode, or
else the sender may send too fast for the switch and/or receiver to
keep up. Bitrate may be expressed in bits per second (\-\-bitrate
5000000), kilobits per second (\f(CW\*(C`\-\-bitrate 5000k\*(C'\fR) or
megabits per second (\f(CW\*(C`\-\-bitrate 5m\*(C'\fR). This is the raw bitrate,
including packet headers, forward error correction, retransmissions,
etc. Actual payload bitrate will be lower.
.ie n .IP "\-\-fec \fIinterleave\fI""x""\fIredundancy\f(CI""/""\fIstripesize\fR" 4
.el .IP "\-\-fec \fIinterleave\f(CIx\fIredundancy\f(CI/\fIstripesize\fR" 4
.IX Item "--fec interleavexredundancy/stripesize"
Enables forward error correction. The goal of forward error
correction is to transmit redundant data, in order to make up for
packets lost in transit. Indeed, in unidirectional mode, the receivers
have no way of requesting retransmission of lost packets, thus the
only way to address packet loss is to include redundant information to
begin with. The algorithm is designed in such a way that if \fIr\fR
redundant packets are transmitted, that those can be used to
compensate for the loss of \fIany\fR r packets in the same \s-1FEC\s0 group
(stripe).
.Sp
In order to increase robustness of the \s-1FEC\s0 algorithm against burst
packet losses, each \fIslice\fR is divided in \fIinterleave\fR
stripes. Each stripe has \fIstripesize\fR blocks (if not specified,
stripesize is calculated by diving \fIslice-size\fR by
\&\fIinterleave\fR). For each stripe, \fIredundancy\fR \s-1FEC\s0 packets are
added. Stripes are organized in such a fashion that consecutive
packets belong to different stripes. This way, we ensure that burst
losses affect different stripes, rather than using all \s-1FEC\s0 packets of
a single stripe. Example: \f(CW\*(C`\-\-fec 8x8/128\*(C'\fR
.IP "\-\-rate\-governor \fImodule.so:key1=value1,key2=value2\fR" 4
.IX Item "--rate-governor module.so:key1=value1,key2=value2"
Applies a dynamically loadable rate governor. \fImodule.so\fR is
the name of the preloadable module, which is followed by a number of
property assignments (\fIkey1=value1\fR). The rate governor controls
the transmission rate according to various criteria, such as
congestion information received from a routing or encapsulating
device. See comments in \f(CW\*(C`/usr/include/udpcast/rateGovernor.h\*(C'\fR
and example in \f(CW\*(C`examples/rateGovernor\*(C'\fR for more details
.IP "\-\-rexmit\-hello\-interval \fItimeout\fR" 4
.IX Item "--rexmit-hello-interval timeout"
If set, rebroadcasts the \s-1HELLO\s0 packet used for initiating the
casting each \fItimeout\fR milliseconds.
.Sp
This option is useful together with \fIasyc mode\fR, because with
async mode the receiver won't send a connection request to the sender
(and hence won't get a connection reply). In \fIasync mode\fR, the
receivers get all needed information from the \fIhello\fR packet
instead, and are thus particularly dependant on the reception of this
packet, makeing retransmission useful.
.Sp
This option is also useful on networks where packet loss is so high
that even with connection requests, sender and receiver would not find
each other otherwise.
.IP "\-\-retries\-until\-drop \fIretries\fR" 4
.IX Item "--retries-until-drop retries"
How many time to send a \s-1REQACK\s0 until dropping a receiver. Lower
retrycounts make \f(CW\*(C`udp\-sender\*(C'\fR faster to react to crashed
receivers, but they also increase the probability of false alerts
(dropping receivers that are not actually crashed, but merely slow to
respond for whatever reason)
.IP "\-\-streaming" 4
.IX Item "--streaming"
Allows receivers to join an ongoing transmission mid through
.SS "Keyboardless mode"
.IX Subsection "Keyboardless mode"
The options below help to run a sender in unattended mode.
.IP "\-\-min\-receivers \fIn\fR" 4
.IX Item "--min-receivers n"
Automatically start as soon as a minimal number of receivers have
connected.
.IP "\-\-min\-wait \fIt\fR" 4
.IX Item "--min-wait t"
Even when the necessary amount of receivers \fIdo\fR have
connected, still wait until \fIt\fR seconds since first receiver
connection have passed.
.IP "\-\-max\-wait \fIt\fR" 4
.IX Item "--max-wait t"
When not enough receivers have connected (but at least one), start
anyways when \fIt\fR seconds since first receiver connection have
pased.
.IP "\-\-nokbd" 4
.IX Item "--nokbd"
Do not read start signal from keyboard, and do not display any
message telling the user to press any key to start.
.IP "\-\-start\-timeout \fIsec\fR" 4
.IX Item "--start-timeout sec"
sender aborts at start if it doesn't see a receiver within this
many seconds. Furthermore, transmission of data needs to start within
this delay. Once transmission is started, the timeout no longer
applies.
.IP "\-\-daemon\-mode" 4
.IX Item "--daemon-mode"
Do not exit when done, but instead wait for the next batch of
receivers. If this option is given twice, udp-sender puts itself into
the background, closes its standard file descriptors, and acts as a
real daemon.
.IP "\-\-pid\-file \fIfile\fR" 4
.IX Item "--pid-file file"
Allow to specify a pid file. If given together with
\&\f(CW\*(C`\-\-daemon\-mode\*(C'\fR, udp-sender will write its pid into this
file. If given together with \f(CW\*(C`\-\-kill\*(C'\fR, the process with the
given pid will be killed.
.IP "\-\-kill" 4
.IX Item "--kill"
Shuts down the udp-sender identified by the pid file (which also
must be specified). Kill does not interrupt an ongoing transmission,
but instead waits until it is finished.
.PP
Example:
.PP
\&\f(CW\*(C`udp\-sender \-f zozo \-\-min\-receivers 5 \-\-min\-wait 20 \-\-max\-wait 80\*(C'\fR
.IP "\(bu" 4
If one receiver connects at 18h00.00, and 4 more within the next 5
minutes, start at 18h00.20. (5 receivers connected, but min-wait not
yet pased)
.IP "\(bu" 4
If one receiver connects at 18h00.00, and 3 more within the next 5
minutes, then a last one at 18h00.25, start right after.
.IP "\(bu" 4
If one receiver connects at 18h00.00, then 3 more within the next
15 minutes, then no one, start at 18h01.20. (not enough receivers, but
we start anyways after max-wait).
.SS "Logging and statistics options"
.IX Subsection "Logging and statistics options"
The options instruct \f(CW\*(C`udp\-sender\*(C'\fR to log some additional
statistics to a file:
.IP "\-\-stat\-period \fIseconds\fR" 4
.IX Item "--stat-period seconds"
Every so much milliseconds, print some statistics to stderr: how
much bytes sent so far log, position in uncompressed file (if
applicable), retransmit count... By default, this is printed every
half second.
.IP "\-\-print\-uncompressed\-position \fIflag\fR" 4
.IX Item "--print-uncompressed-position flag"
By default, udp-sender only prints the position in uncompressed
file if the 2 following conditions are met:
.RS 4
.IP "\(bu" 4
Input is piped via a compressor (\f(CW\*(C`\-p \*(C'\fR option).
.IP "\(bu" 4
The primary input is seekable (file or device)
.RE
.RS 4
.Sp
With the \f(CW\*(C`\-\-print\-uncompressed\-position\*(C'\fR, options, you can
change this behavior:
.IP "\(bu" 4
If flag is 0, uncompressed position will \fBnever\fR be printed,
even if above conditions are met
.IP "\(bu" 4
If flag is 1, uncompressed position will \fBalways\fR be
printed, even if above conditions are \fBnot\fR met
.RE
.RS 4
.RE
.IP "\-\-log \fIfile\fR" 4
.IX Item "--log file"
Logs some stuff into \fIfile\fR.
.IP "\-\-no\-progress" 4
.IX Item "--no-progress"
Do not display progress statistics.
.IP "\-\-bw\-period \fIseconds\fR" 4
.IX Item "--bw-period seconds"
Every so much seconds, log instantenous bandwidth seen during that
period. Note: this is different from the bandwidth displayed to stderr
of the receiver, which is the average since start of
transmission.
.SS "Tuning options (sender)"
.IX Subsection "Tuning options (sender)"
The following tuning options are all about slice size. Udpcast groups
its data in \fIslices\fR, which are a series of blocks (\s-1UDP\s0
packets). These groups are relevant for
.IP "\(bu" 4
data retransmission: after each slice, the server asks the
receivers whether they have received all blocks, and if needed retransmits
what has been missing
.IP "\(bu" 4
forward error correction: each slice has its set of data blocks, and
matching \s-1FEC\s0 blocks.
.IP "\-\-min\-slice\-size \fIsize\fR" 4
.IX Item "--min-slice-size size"
minimum slice size (expressed in blocks). Default is 16. When
dynamically adjusting slice size (only in non-duplex mode), never use
smaller slices than this. Ignored in duplex mode (default).
.IP "\-\-max\-slice\-size \fIsize\fR" 4
.IX Item "--max-slice-size size"
maximum slice size (expressed in blocks). Default is 1024. When
dynamically adjusting slice size (only in non-duplex mode), never use
larger slices than this. Ignored in duplex mode (default).
.IP "\-\-default\-slice\-size \fIsize\fR" 4
.IX Item "--default-slice-size size"
Slice size used (starting slice size in half-duplex mode).
.IP "\-\-rehello\-offset \fIoffs\fR" 4
.IX Item "--rehello-offset offs"
in streaming mode, how many packets before end of slice the hello
packet will be transferred (default 50). Chose larger values if you
notice that receivers are excessively slow to pick up running
transmission
.SS "Tuning the forward error correction"
.IX Subsection "Tuning the forward error correction"
There are three parameters on which to act:
.IP "redundancy" 4
.IX Item "redundancy"
This influences how much extra packets are included per
stripe. The higher this is, the more redundancy there is, which means
that the transmission becomes more robust against loss. However, \s-1CPU\s0
time necessary is also proportional to redundancy (a factor to
consider on slow \s-1PC\s0's), and of course, a higher redundancy augments
the amount of data to be transmitted.
.IP "interleave" 4
.IX Item "interleave"
This influences among how many stripes the data is
divided. Higher interleave improves robustness against burst loss
(for example, 64 packets in a row...). It doesn't increase robustness
against randomly spread packet loss. \fBNote\fR: interleave bigger than 8
will force a smaller stripesize, due to the fact that slicesize is limited
to 1024.
.IP "stripesize" 4
.IX Item "stripesize"
How many data blocks there are in a stripe. Due to the algorithm
used, this cannot be more than 128. Reducing stripe size is an
indirect way of augmenting (relative) redundancy, without incurring
the \s-1CPU\s0 penalty of larger (absolute) redundancy. However, a larger
absolute redundancy is still preferable over a smaller stripesize,
because it improves robustness against clustered losses. For
instance, if 8/128 is preferable over 4/64, because with 8/128 the 8
\&\s-1FEC\s0 packets can be used to compensate for the loss of any of the 128
data packets, whereas with 4/64, each group of 4 \s-1FEC\s0 packets can only
be used against its own set of 64 data packets. If for instance the
first 8 packets were lost, they would be recoverable with 8/128, but
not with 4/64.
.PP
Considering these, change parameters as follows:
.IP "\(bu" 4
If you observe long stretches of lost packets, increase interleave
.IP "\(bu" 4
If you observe that transfer is slowed down by \s-1CPU\s0 saturation,
decrease redundancy and stripesize proportionnally.
.IP "\(bu" 4
If you observe big \fIvariations\fR in packet loss rate, 
increase redundancy and stripesize proportionnally.
.IP "\(bu" 4
If you just observe high loss, but not necessarily clustered in any
special way, increase redundancy or decrease stripesize
.IP "\(bu" 4
Be aware that network equipment or the receiver may be dropping
packets because of a bandwidth which is too high. Try limiting it
using \f(CW\*(C`max\-bitrate\*(C'\fR
.IP "\(bu" 4
The receiver may also be dropping packets because it cannot write
the data to disk fast enough. Use hdparm to optimize disk access on
the receiver. Try playing with the settings in
\&\f(CW\*(C`/proc/sys/net/core/rmem_default\*(C'\fR and
\&\f(CW\*(C`/proc/sys/net/core/rmem_max\*(C'\fR, i.e. setting them to a higher
value.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
udp-receiver
.SH "AUTHOR"
.IX Header "AUTHOR"
Alain Knaff
